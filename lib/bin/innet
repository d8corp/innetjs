#!/usr/bin/env node
'use strict';

var path = require('path');
var fs = require('fs-extra');
var http = require('http');
var https = require('https');
var ora = require('ora');
var chalk = require('chalk');
var util = require('util');
var rollup = require('rollup');
var commonjs = require('@rollup/plugin-commonjs');
var pluginNodeResolve = require('@rollup/plugin-node-resolve');
var rollupPluginTerser = require('rollup-plugin-terser');
var typescript = require('rollup-plugin-typescript2');
var postcss = require('rollup-plugin-postcss');
var autoprefixer = require('autoprefixer');
var express = require('express');
var json = require('@rollup/plugin-json');
var tmp = require('tmp');
var commander = require('commander');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var http__default = /*#__PURE__*/_interopDefaultLegacy(http);
var https__default = /*#__PURE__*/_interopDefaultLegacy(https);
var ora__default = /*#__PURE__*/_interopDefaultLegacy(ora);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var util__default = /*#__PURE__*/_interopDefaultLegacy(util);
var rollup__default = /*#__PURE__*/_interopDefaultLegacy(rollup);
var commonjs__default = /*#__PURE__*/_interopDefaultLegacy(commonjs);
var typescript__default = /*#__PURE__*/_interopDefaultLegacy(typescript);
var postcss__default = /*#__PURE__*/_interopDefaultLegacy(postcss);
var autoprefixer__default = /*#__PURE__*/_interopDefaultLegacy(autoprefixer);
var express__default = /*#__PURE__*/_interopDefaultLegacy(express);
var json__default = /*#__PURE__*/_interopDefaultLegacy(json);
var tmp__default = /*#__PURE__*/_interopDefaultLegacy(tmp);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

require('dotenv').config();
var publicFolder = process.env.PUBLIC_FOLDER || 'public';
var livereload = require('rollup-plugin-livereload');
var exec = util__default['default'].promisify(require('child_process').exec);
var proxy = require('express-http-proxy');
function task(name, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var task, result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    task = ora__default['default'](name).start();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, callback(task)];
                case 2:
                    result = _a.sent();
                    task.succeed();
                    return [2 /*return*/, result];
                case 3:
                    e_1 = _a.sent();
                    task.fail();
                    console.log(chalk__default['default'].red('â”” ' + ((e_1 === null || e_1 === void 0 ? void 0 : e_1.message) || e_1)));
                    return [2 /*return*/, Promise.reject(e_1)];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function init(appName) {
    return __awaiter(this, void 0, void 0, function () {
        var appPath, libPath;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    appPath = path__default['default'].resolve(appName);
                    libPath = path__default['default'].resolve(__dirname + '/..');
                    return [4 /*yield*/, task('Check if app folder is available', function () {
                            if (fs__default['default'].existsSync(appPath)) {
                                throw Error("'" + appPath + "' already exist");
                            }
                        })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, task('Copy files', function () { return fs__default['default'].copy(libPath + "/template", appPath); })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, task('Install packages', function () { return exec("cd " + appPath + " && npm i"); })];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function check(projectPath) {
    return __awaiter(this, void 0, void 0, function () {
        var srcPath, publicPath, indexExtension;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    srcPath = projectPath + "/src";
                    publicPath = projectPath + "/" + publicFolder;
                    return [4 /*yield*/, task('Check src', function () {
                            if (!fs__default['default'].existsSync(srcPath)) {
                                throw Error('src folder is missing');
                            }
                        })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, task('Check public', function () {
                            if (!fs__default['default'].existsSync(publicPath)) {
                                throw Error("public folder is missing here " + publicPath);
                            }
                        })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, task('Check index.html', function () {
                            if (!fs__default['default'].existsSync(publicPath + "/index.html")) {
                                throw Error('index.html is missing');
                            }
                        })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, task('Detection of index file', function () {
                            if (fs__default['default'].existsSync(srcPath + "/index.js")) {
                                indexExtension = 'js';
                            }
                            else if (fs__default['default'].existsSync(srcPath + "/index.ts")) {
                                indexExtension = 'ts';
                            }
                            else if (fs__default['default'].existsSync(srcPath + "/index.tsx")) {
                                indexExtension = 'tsx';
                            }
                            else {
                                throw Error('index file is not detected');
                            }
                        })];
                case 4:
                    _a.sent();
                    return [2 /*return*/, indexExtension];
            }
        });
    });
}
function getFile(file) {
    file = path__default['default'].resolve(file);
    if (!fs__default['default'].existsSync(file)) {
        throw Error('Cannot find the file: ' + file);
    }
    if (fs__default['default'].lstatSync(file).isDirectory()) {
        var tmpFile = file;
        if (!fs__default['default'].existsSync(tmpFile = path__default['default'].join(file, 'index.ts')) &&
            !fs__default['default'].existsSync(tmpFile = path__default['default'].join(file, 'index.tsx')) &&
            !fs__default['default'].existsSync(tmpFile = path__default['default'].join(file, 'index.js'))) {
            throw Error('Cannot find index file in: ' + file);
        }
        file = tmpFile;
    }
    else if (!file.endsWith('.ts') && !file.endsWith('.tsx') && !file.endsWith('.js')) {
        throw Error('File should has `.ts` or `.tsx` or `.js` extension: ' + file);
    }
    if (!fs__default['default'].existsSync(file)) {
        throw Error('Cannot find the file: ' + file);
    }
    return file;
}
function start() {
    return __awaiter(this, void 0, void 0, function () {
        var projectPath, cert, key, indexExtension, options, watcher, eventTask;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    projectPath = path__default['default'].resolve();
                    try {
                        cert = fs__default['default'].readFileSync(process.env.SSL_CRT_FILE || 'localhost.crt');
                    }
                    catch (e) { }
                    try {
                        key = fs__default['default'].readFileSync(process.env.SSL_KEY_FILE || 'localhost.key');
                    }
                    catch (e) { }
                    return [4 /*yield*/, check(projectPath)];
                case 1:
                    indexExtension = _a.sent();
                    options = {
                        input: "src/index." + indexExtension,
                        output: {
                            sourcemap: true,
                            format: 'iife',
                            dir: publicFolder + "/build"
                        },
                        plugins: [
                            commonjs__default['default'](),
                            pluginNodeResolve.nodeResolve(),
                            json__default['default'](),
                            postcss__default['default']({
                                plugins: [autoprefixer__default['default']()],
                                modules: process.env.CSS_MODULES === 'true',
                                sourceMap: true,
                                extract: process.env.CSS_EXTRACT === 'true' && path__default['default'].resolve(publicFolder + "/build/index.css"),
                            }),
                            typescript__default['default'](),
                            server(projectPath + "/" + publicFolder, cert, key),
                            livereload(__assign({ watch: publicFolder, verbose: false }, (key && cert ? { https: { key: key, cert: cert } } : {})))
                        ],
                    };
                    watcher = rollup__default['default'].watch(options);
                    watcher.on('event', function (e) {
                        if (e.code == 'ERROR') {
                            eventTask.fail('Bundling is failed');
                            console.log(chalk__default['default'].red('â”” ' + e.error.message));
                        }
                        else if (e.code === 'BUNDLE_START') {
                            if (!!(eventTask === null || eventTask === void 0 ? void 0 : eventTask.isSpinning)) {
                                eventTask.stop();
                            }
                            eventTask = ora__default['default']('Bundling\n').start();
                        }
                        else if (e.code === 'BUNDLE_END') {
                            if (eventTask.isSpinning) {
                                eventTask.succeed('Bundle is ready');
                            }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
function build() {
    return __awaiter(this, void 0, void 0, function () {
        var projectPath, indexExtension;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    projectPath = path__default['default'].resolve();
                    return [4 /*yield*/, check(projectPath)];
                case 1:
                    indexExtension = _a.sent();
                    return [4 /*yield*/, task('Remove build', function () { return fs__default['default'].remove(projectPath + "/" + publicFolder + "/build"); })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, task('Build production bundle', function () { return __awaiter(_this, void 0, void 0, function () {
                            var inputOptions, outputOptions, bundle;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        inputOptions = {
                                            input: "src/index." + indexExtension,
                                            plugins: [
                                                commonjs__default['default'](),
                                                pluginNodeResolve.nodeResolve(),
                                                json__default['default'](),
                                                postcss__default['default']({
                                                    plugins: [autoprefixer__default['default']()],
                                                    extract: process.env.CSS_EXTRACT === 'true' && path__default['default'].resolve(publicFolder + "/build/index.css"),
                                                    modules: process.env.CSS_MODULES === 'true',
                                                    sourceMap: process.env.GENERATE_SOURCEMAP === 'true'
                                                }),
                                                typescript__default['default']()
                                            ]
                                        };
                                        outputOptions = {
                                            format: 'iife',
                                            dir: publicFolder + "/build",
                                            plugins: [rollupPluginTerser.terser()],
                                            sourcemap: process.env.GENERATE_SOURCEMAP === 'true'
                                        };
                                        return [4 /*yield*/, rollup__default['default'].rollup(inputOptions)];
                                    case 1:
                                        bundle = _a.sent();
                                        return [4 /*yield*/, bundle.write(outputOptions)];
                                    case 2:
                                        _a.sent();
                                        return [4 /*yield*/, bundle.close()];
                                    case 3:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function run(file) {
    return __awaiter(this, void 0, void 0, function () {
        var input, folder, jsFilePath;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, task('Check file', function () { return getFile(file); })];
                case 1:
                    input = _a.sent();
                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                            tmp__default['default'].dir(function (err, folder) {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(folder);
                                }
                            });
                        })];
                case 2:
                    folder = _a.sent();
                    jsFilePath = folder + "/index.js";
                    return [4 /*yield*/, task('Build bundle', function () { return __awaiter(_this, void 0, void 0, function () {
                            var inputOptions, outputOptions, bundle;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        inputOptions = {
                                            input: input,
                                            plugins: [
                                                commonjs__default['default'](),
                                                pluginNodeResolve.nodeResolve(),
                                                json__default['default'](),
                                                typescript__default['default']({
                                                    tsconfigOverride: {
                                                        compilerOptions: {
                                                            sourceMap: true
                                                        }
                                                    }
                                                })
                                            ]
                                        };
                                        outputOptions = {
                                            format: 'cjs',
                                            file: jsFilePath,
                                            sourcemap: true
                                        };
                                        return [4 /*yield*/, rollup__default['default'].rollup(inputOptions)];
                                    case 1:
                                        bundle = _a.sent();
                                        return [4 /*yield*/, bundle.write(outputOptions)];
                                    case 2:
                                        _a.sent();
                                        return [4 /*yield*/, bundle.close()];
                                    case 3:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, task('Running of the script', function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                require('child_process').spawn('node', ['-r', 'source-map-support/register', jsFilePath], { stdio: 'inherit' });
                                return [2 /*return*/];
                            });
                        }); })];
                case 4:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function server(rootPath, cert, key) {
    var app;
    return {
        writeBundle: function () {
            var _a;
            if (!app) {
                var httpsUsing_1 = !!(cert && key);
                var port_1 = process.env.PORT || 3000;
                app = express__default['default']();
                app.use(express__default['default'].static(rootPath));
                if ((_a = process.env.PROXY) === null || _a === void 0 ? void 0 : _a.startsWith('http')) {
                    app.use(proxy(process.env.PROXY, {
                        https: httpsUsing_1
                    }));
                }
                var server_1 = httpsUsing_1 ? https__default['default'].createServer({ key: key, cert: cert }, app) : http__default['default'].createServer(app);
                server_1.listen(port_1, function () {
                    console.log(chalk__default['default'].green('âž¤') + " Server started on http" + (httpsUsing_1 ? 's' : '') + "://localhost:" + port_1);
                });
            }
        }
    };
}

var version = "1.2.0";

commander.program
    .version(version, '-v, --version');
commander.program
    .command('init <app-name>')
    .description('create innet boilerplate')
    .option('-e, --error', 'show error details')
    .action(function (appName, _a) {
    var error = _a.error;
    init(appName).catch(function (e) {
        if (error) {
            console.error(e);
        }
    });
});
commander.program
    .command('run <file-path>')
    .description('Run js, ts or tsx file')
    .option('-e, --error', 'show error details')
    .action(function (filePath, _a) {
    var error = _a.error;
    run(filePath).catch(function (e) {
        if (error) {
            console.error(e);
        }
    });
});
commander.program
    .command('start')
    .description('start development with innet boilerplate')
    .option('-e, --error', 'show error details')
    .action(function (_a) {
    var error = _a.error;
    start().catch(function (e) {
        if (error) {
            console.error(e);
        }
    });
});
commander.program
    .command('build')
    .description('build production bundle')
    .option('-e, --error', 'show error details')
    .action(function (_a) {
    var error = _a.error;
    build().catch(function (e) {
        if (error) {
            console.error(e);
        }
    });
});
commander.program
    .parse(process.argv);
