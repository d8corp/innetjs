#!/usr/bin/env node
'use strict';

var path = require('path');
var fs = require('fs-extra');
var http = require('http');
var https = require('https');
var ora = require('ora');
var chalk = require('chalk');
var util = require('util');
var rollup = require('rollup');
var commonjs = require('@rollup/plugin-commonjs');
var pluginNodeResolve = require('@rollup/plugin-node-resolve');
var rollupPluginTerser = require('rollup-plugin-terser');
var typescript = require('rollup-plugin-typescript2');
var postcss = require('rollup-plugin-postcss');
var autoprefixer = require('autoprefixer');
var express = require('express');
var json = require('@rollup/plugin-json');
var tmp = require('tmp');
var proxy = require('express-http-proxy');
var selector = require('cli-select');
var commander = require('commander');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var http__default = /*#__PURE__*/_interopDefaultLegacy(http);
var https__default = /*#__PURE__*/_interopDefaultLegacy(https);
var ora__default = /*#__PURE__*/_interopDefaultLegacy(ora);
var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var rollup__default = /*#__PURE__*/_interopDefaultLegacy(rollup);
var commonjs__default = /*#__PURE__*/_interopDefaultLegacy(commonjs);
var typescript__default = /*#__PURE__*/_interopDefaultLegacy(typescript);
var postcss__default = /*#__PURE__*/_interopDefaultLegacy(postcss);
var autoprefixer__default = /*#__PURE__*/_interopDefaultLegacy(autoprefixer);
var express__default = /*#__PURE__*/_interopDefaultLegacy(express);
var json__default = /*#__PURE__*/_interopDefaultLegacy(json);
var tmp__default = /*#__PURE__*/_interopDefaultLegacy(tmp);
var proxy__default = /*#__PURE__*/_interopDefaultLegacy(proxy);
var selector__default = /*#__PURE__*/_interopDefaultLegacy(selector);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var livereload = require('rollup-plugin-livereload');
var string = require('rollup-plugin-string').string;
var _a = require('child_process'), exec = _a.exec, spawn = _a.spawn;
var execAsync = util.promisify(exec);
require('dotenv').config();
function getFile(file) {
    file = path__default['default'].resolve(file);
    if (!fs__default['default'].existsSync(file)) {
        throw Error('Cannot find the file: ' + file);
    }
    if (fs__default['default'].lstatSync(file).isDirectory()) {
        var tmpFile = file;
        if (!fs__default['default'].existsSync(tmpFile = path__default['default'].join(file, 'index.ts')) &&
            !fs__default['default'].existsSync(tmpFile = path__default['default'].join(file, 'index.tsx')) &&
            !fs__default['default'].existsSync(tmpFile = path__default['default'].join(file, 'index.js'))) {
            throw Error('Cannot find index file in: ' + file);
        }
        file = tmpFile;
    }
    else if (!file.endsWith('.ts') && !file.endsWith('.tsx') && !file.endsWith('.js')) {
        throw Error('File should has `.ts` or `.tsx` or `.js` extension: ' + file);
    }
    if (!fs__default['default'].existsSync(file)) {
        throw Error('Cannot find the file: ' + file);
    }
    return file;
}
function task(name, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var task, result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    task = ora__default['default'](name).start();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, callback(task)];
                case 2:
                    result = _a.sent();
                    task.succeed();
                    process.stdout.clearLine(1);
                    return [2 /*return*/, result];
                case 3:
                    e_1 = _a.sent();
                    task.fail();
                    process.stdout.clearLine(1);
                    console.log(chalk__default['default'].red('â”” ' + ((e_1 === null || e_1 === void 0 ? void 0 : e_1.message) || e_1)));
                    return [2 /*return*/, Promise.reject(e_1)];
                case 4: return [2 /*return*/];
            }
        });
    });
}
var InnetJS = /** @class */ (function () {
    function InnetJS(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.projectFolder, projectFolder = _c === void 0 ? process.env.PROJECT_FOLDER || '' : _c, _d = _b.publicFolder, publicFolder = _d === void 0 ? process.env.PUBLIC_FOLDER || 'public' : _d, _e = _b.buildFolder, buildFolder = _e === void 0 ? process.env.BUILD_FOLDER || path__default['default'].join('public', 'build') : _e, _f = _b.srcFolder, srcFolder = _f === void 0 ? process.env.SRC_FOLDER || 'src' : _f, _g = _b.sourcemap, sourcemap = _g === void 0 ? process.env.SOURCEMAP ? process.env.SOURCEMAP === 'true' : false : _g, _h = _b.cssModules, cssModules = _h === void 0 ? process.env.CSS_MODULES ? process.env.CSS_MODULES === 'true' : false : _h, _j = _b.cssInJs, cssInJs = _j === void 0 ? process.env.CSS_IN_JS ? process.env.CSS_IN_JS === 'true' : false : _j, _k = _b.sslKey, sslKey = _k === void 0 ? process.env.SSL_KEY || 'localhost.key' : _k, _l = _b.sslCrt, sslCrt = _l === void 0 ? process.env.SSL_CRT || 'localhost.crt' : _l, _m = _b.proxy, proxy = _m === void 0 ? process.env.PROXY || '' : _m, _o = _b.port, port = _o === void 0 ? process.env.PORT ? +process.env.PORT : 3000 : _o;
        this.projectFolder = path__default['default'].resolve(projectFolder);
        this.publicFolder = path__default['default'].resolve(publicFolder);
        this.buildFolder = path__default['default'].resolve(buildFolder);
        this.srcFolder = path__default['default'].resolve(srcFolder);
        this.sourcemap = sourcemap;
        this.cssModules = cssModules;
        this.cssInJs = cssInJs;
        this.sslKey = sslKey;
        this.sslCrt = sslCrt;
        this.port = port;
        this.proxy = proxy;
    }
    // Methods
    InnetJS.prototype.init = function (appName, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.template, template = _c === void 0 ? 'fe' : _c, _d = _b.force, force = _d === void 0 ? false : _d;
        return __awaiter(this, void 0, void 0, function () {
            var appPath, libPath, templatePath;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        appPath = path__default['default'].resolve(appName);
                        if (!!force) return [3 /*break*/, 2];
                        return [4 /*yield*/, task('Check if app folder is available', function (task) { return __awaiter(_this, void 0, void 0, function () {
                                var result;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!fs__default['default'].existsSync(appPath)) return [3 /*break*/, 3];
                                            task.fail();
                                            console.log(chalk__default['default'].red("\u2514 '" + appPath + "' already exist, what do you want?"));
                                            return [4 /*yield*/, selector__default['default']({
                                                    values: ['Stop the process', 'Remove the folder', 'Merge with template']
                                                })];
                                        case 1:
                                            result = (_a.sent()).id;
                                            process.stdout.moveCursor(0, -2);
                                            if (!result) {
                                                throw Error("'" + appPath + "' already exist");
                                            }
                                            if (!(result === 1)) return [3 /*break*/, 3];
                                            return [4 /*yield*/, fs__default['default'].remove(appPath)];
                                        case 2:
                                            _a.sent();
                                            _a.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _e.sent();
                        _e.label = 2;
                    case 2:
                        libPath = path__default['default'].resolve(__dirname, '..');
                        templatePath = path__default['default'].resolve(libPath, 'templates', template);
                        return [4 /*yield*/, task('Check if the template exists', function () {
                                if (!fs__default['default'].existsSync(templatePath)) {
                                    throw Error("The template '" + template + "' is not exist");
                                }
                            })];
                    case 3:
                        _e.sent();
                        return [4 /*yield*/, task('Copy files', function () { return fs__default['default'].copy(templatePath, appPath); })];
                    case 4:
                        _e.sent();
                        return [4 /*yield*/, task('Install packages', function () { return execAsync("cd " + appPath + " && npm i"); })];
                    case 5:
                        _e.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    InnetJS.prototype.build = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.node, node = _c === void 0 ? false : _c;
        return __awaiter(this, void 0, void 0, function () {
            var indexExtension, pkg, _d, inputOptions, outputOptions;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.getProjectExtension()];
                    case 1:
                        indexExtension = _e.sent();
                        return [4 /*yield*/, task('Remove build', function () { return fs__default['default'].remove(_this.buildFolder); })];
                    case 2:
                        _e.sent();
                        _d = node;
                        if (!_d) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.getPackage()];
                    case 3:
                        _d = (_e.sent());
                        _e.label = 4;
                    case 4:
                        pkg = _d;
                        inputOptions = {
                            input: path__default['default'].resolve(this.srcFolder, "index." + indexExtension),
                            plugins: [
                                commonjs__default['default'](),
                                pluginNodeResolve.nodeResolve(),
                                json__default['default'](),
                                typescript__default['default'](),
                                string({
                                    include: '**/*.*',
                                    exclude: [
                                        '**/*.ts',
                                        '**/*.tsx',
                                        '**/*.js',
                                        '**/*.jsx',
                                        '**/*.json',
                                        '**/*.css',
                                        '**/*.scss',
                                    ]
                                }),
                            ]
                        };
                        outputOptions = {
                            dir: this.buildFolder,
                            sourcemap: this.sourcemap
                        };
                        if (node) {
                            inputOptions.external = Object.keys((pkg === null || pkg === void 0 ? void 0 : pkg.dependencies) || {});
                            outputOptions.format = 'cjs';
                        }
                        else {
                            inputOptions.plugins.push(postcss__default['default']({
                                plugins: [autoprefixer__default['default']()],
                                extract: !this.cssInJs,
                                modules: this.cssModules,
                                sourceMap: this.sourcemap
                            }));
                            outputOptions.format = 'iife';
                            outputOptions.plugins = [rollupPluginTerser.terser()];
                        }
                        return [4 /*yield*/, task('Build production bundle', function () { return __awaiter(_this, void 0, void 0, function () {
                                var bundle;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, rollup__default['default'].rollup(inputOptions)];
                                        case 1:
                                            bundle = _a.sent();
                                            return [4 /*yield*/, bundle.write(outputOptions)];
                                        case 2:
                                            _a.sent();
                                            return [4 /*yield*/, bundle.close()];
                                        case 3:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 5:
                        _e.sent();
                        if (!pkg) return [3 /*break*/, 7];
                        return [4 /*yield*/, task('Copy package.json', function () { return __awaiter(_this, void 0, void 0, function () {
                                var data;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            data = __assign({}, pkg);
                                            delete data.private;
                                            delete data.devDependencies;
                                            return [4 /*yield*/, fs__default['default'].writeFile(path__default['default'].resolve(this.buildFolder, 'package.json'), JSON.stringify(data, undefined, 2), 'UTF-8')];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 6:
                        _e.sent();
                        _e.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    InnetJS.prototype.start = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.node, node = _c === void 0 ? false : _c;
        return __awaiter(this, void 0, void 0, function () {
            var indexExtension, pkg, _d, options, key, cert, watcher, eventTask;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.getProjectExtension()];
                    case 1:
                        indexExtension = _e.sent();
                        _d = node;
                        if (!_d) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getPackage()];
                    case 2:
                        _d = (_e.sent());
                        _e.label = 3;
                    case 3:
                        pkg = _d;
                        return [4 /*yield*/, task('Remove build', function () { return fs__default['default'].remove(_this.buildFolder); })];
                    case 4:
                        _e.sent();
                        options = {
                            input: path__default['default'].resolve(this.srcFolder, "index." + indexExtension),
                            output: {
                                dir: this.buildFolder,
                                sourcemap: true
                            },
                            plugins: [
                                commonjs__default['default'](),
                                json__default['default'](),
                                typescript__default['default']({
                                    tsconfigOverride: {
                                        compilerOptions: {
                                            sourceMap: true
                                        }
                                    }
                                }),
                            ],
                        };
                        if (node) {
                            options.output.format = 'cjs';
                            options.external = Object.keys((pkg === null || pkg === void 0 ? void 0 : pkg.dependencies) || {});
                            options.plugins.push(pluginNodeResolve.nodeResolve({
                                moduleDirectories: [path__default['default'].resolve(this.srcFolder, 'node_modules')]
                            }), string({
                                include: '**/*.*',
                                exclude: [
                                    '**/*.ts',
                                    '**/*.tsx',
                                    '**/*.js',
                                    '**/*.jsx',
                                    '**/*.json',
                                ]
                            }), this.createServer(options.external));
                        }
                        else {
                            key = path__default['default'].basename(this.sslKey) !== this.sslKey
                                ? this.sslKey
                                : fs__default['default'].existsSync(this.sslKey)
                                    ? fs__default['default'].readFileSync(this.sslKey)
                                    : undefined;
                            cert = path__default['default'].basename(this.sslCrt) !== this.sslCrt
                                ? this.sslCrt
                                : fs__default['default'].existsSync(this.sslCrt)
                                    ? fs__default['default'].readFileSync(this.sslCrt)
                                    : undefined;
                            options.output.format = 'iife';
                            options.plugins.push(pluginNodeResolve.nodeResolve(), string({
                                include: '**/*.*',
                                exclude: [
                                    '**/*.ts',
                                    '**/*.tsx',
                                    '**/*.js',
                                    '**/*.jsx',
                                    '**/*.json',
                                    '**/*.css',
                                    '**/*.scss',
                                ]
                            }), postcss__default['default']({
                                plugins: [autoprefixer__default['default']()],
                                modules: this.cssModules,
                                sourceMap: true,
                                extract: !this.cssInJs,
                            }), this.createClient(key, cert), livereload(__assign({ watch: this.publicFolder, verbose: false }, (key && cert ? { https: { key: key, cert: cert } } : {}))));
                        }
                        watcher = rollup__default['default'].watch(options);
                        watcher.on('event', function (e) {
                            if (e.code == 'ERROR') {
                                eventTask.fail('Bundling is failed');
                                console.log(chalk__default['default'].red('â”” ' + e.error.message));
                            }
                            else if (e.code === 'BUNDLE_START') {
                                if (!!(eventTask === null || eventTask === void 0 ? void 0 : eventTask.isSpinning)) {
                                    eventTask.stop();
                                }
                                eventTask = ora__default['default']('Bundling\n').start();
                            }
                            else if (e.code === 'BUNDLE_END') {
                                if (eventTask.isSpinning) {
                                    eventTask.succeed('Bundle is ready');
                                }
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    InnetJS.prototype.run = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var input, folder, jsFilePath;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, task('Check file', function () { return getFile(file); })];
                    case 1:
                        input = _a.sent();
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                tmp__default['default'].dir(function (err, folder) {
                                    if (err) {
                                        reject(err);
                                    }
                                    else {
                                        resolve(folder);
                                    }
                                });
                            })];
                    case 2:
                        folder = _a.sent();
                        jsFilePath = folder + "/index.js";
                        return [4 /*yield*/, task('Build bundle', function () { return __awaiter(_this, void 0, void 0, function () {
                                var inputOptions, outputOptions, bundle;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            inputOptions = {
                                                input: input,
                                                plugins: [
                                                    commonjs__default['default'](),
                                                    pluginNodeResolve.nodeResolve(),
                                                    json__default['default'](),
                                                    typescript__default['default']({
                                                        tsconfigOverride: {
                                                            compilerOptions: {
                                                                sourceMap: true
                                                            }
                                                        }
                                                    })
                                                ]
                                            };
                                            outputOptions = {
                                                format: 'cjs',
                                                file: jsFilePath,
                                                sourcemap: true
                                            };
                                            return [4 /*yield*/, rollup__default['default'].rollup(inputOptions)];
                                        case 1:
                                            bundle = _a.sent();
                                            return [4 /*yield*/, bundle.write(outputOptions)];
                                        case 2:
                                            _a.sent();
                                            return [4 /*yield*/, bundle.close()];
                                        case 3:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, task('Running of the script', function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    spawn('node', ['-r', 'source-map-support/register', jsFilePath], { stdio: 'inherit' });
                                    return [2 /*return*/];
                                });
                            }); })];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // Utils
    InnetJS.prototype.getProjectExtension = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.projectExtension) {
                            return [2 /*return*/, this.projectExtension];
                        }
                        return [4 /*yield*/, task('Check src', function () {
                                if (!fs__default['default'].existsSync(_this.srcFolder)) {
                                    throw Error('src folder is missing');
                                }
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, task('Detection of index file', function () {
                                if (fs__default['default'].existsSync(path__default['default'].join(_this.srcFolder, 'index.js'))) {
                                    _this.projectExtension = 'js';
                                }
                                else if (fs__default['default'].existsSync(path__default['default'].join(_this.srcFolder, 'index.ts'))) {
                                    _this.projectExtension = 'ts';
                                }
                                else if (fs__default['default'].existsSync(path__default['default'].join(_this.srcFolder, 'index.tsx'))) {
                                    _this.projectExtension = 'tsx';
                                }
                                else if (fs__default['default'].existsSync(path__default['default'].join(_this.srcFolder, 'index.jsx'))) {
                                    _this.projectExtension = 'jsx';
                                }
                                else {
                                    throw Error('index file is not detected');
                                }
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.projectExtension];
                }
            });
        });
    };
    InnetJS.prototype.getPackage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var packageFolder;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.package) {
                            return [2 /*return*/, this.package];
                        }
                        packageFolder = path__default['default'].resolve(this.projectFolder, 'package.json');
                        return [4 /*yield*/, task('Check package.json', function () { return __awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            if (!fs__default['default'].existsSync(packageFolder)) return [3 /*break*/, 2];
                                            _a = this;
                                            return [4 /*yield*/, fs__default['default'].readJson(packageFolder)];
                                        case 1:
                                            _a.package = _b.sent();
                                            _b.label = 2;
                                        case 2: return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.package];
                }
            });
        });
    };
    InnetJS.prototype.createClient = function (key, cert) {
        var _this = this;
        var app;
        return {
            writeBundle: function () {
                var _a;
                if (!app) {
                    var httpsUsing_1 = !!(cert && key);
                    app = express__default['default']();
                    app.use(express__default['default'].static(_this.publicFolder));
                    if ((_a = _this.proxy) === null || _a === void 0 ? void 0 : _a.startsWith('http')) {
                        app.use(proxy__default['default'](_this.proxy, {
                            https: httpsUsing_1
                        }));
                    }
                    var server = httpsUsing_1 ? https__default['default'].createServer({ key: key, cert: cert }, app) : http__default['default'].createServer(app);
                    server.listen(_this.port, function () {
                        console.log(chalk__default['default'].green('âž¤') + " Server started on http" + (httpsUsing_1 ? 's' : '') + "://localhost:" + _this.port);
                    });
                }
            }
        };
    };
    InnetJS.prototype.createServer = function (external) {
        var _this = this;
        var app;
        return {
            writeBundle: function () { return __awaiter(_this, void 0, void 0, function () {
                var filePath, data, regExp;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            app === null || app === void 0 ? void 0 : app.kill();
                            filePath = path__default['default'].resolve(this.buildFolder, 'index.js');
                            return [4 /*yield*/, fs__default['default'].readFile(filePath, 'UTF-8')];
                        case 1:
                            data = _a.sent();
                            regExp = new RegExp("require\\('(" + external.join('|') + ")'\\)", 'g');
                            data = data.replace(regExp, "require('" + path__default['default'].resolve(this.projectFolder, 'node_modules', '$1') + "')");
                            return [4 /*yield*/, fs__default['default'].writeFile(filePath, data)];
                        case 2:
                            _a.sent();
                            app = spawn('node', ['-r', 'source-map-support/register', filePath], { stdio: 'inherit' });
                            return [2 /*return*/];
                    }
                });
            }); }
        };
    };
    return InnetJS;
}());

var version = "1.4.0";

require('dotenv').config();
var innetJS = new InnetJS();
commander.program
    .version(version, '-v, --version');
commander.program
    .command('init <app-name>')
    .description('Create innet boilerplate')
    .option('-e, --error', 'Show error details')
    .action(function (appName, _a) {
    var error = _a.error;
    innetJS.init(appName).catch(function (e) {
        if (error) {
            console.error(e);
        }
    });
});
commander.program
    .command('run <file-path>')
    .description('Run js, ts or tsx file')
    .option('-e, --error', 'Show error details')
    .action(function (filePath, _a) {
    var error = _a.error;
    innetJS.run(filePath).catch(function (e) {
        if (error) {
            console.error(e);
        }
    });
});
commander.program
    .command('start')
    .description('Start development with innet boilerplate')
    .option('-e, --error', 'Show error details')
    .option('-n, --node', 'Start development for Node.js')
    .action(function (_a) {
    var error = _a.error, node = _a.node;
    innetJS.start({ node: node }).catch(function (e) {
        if (error) {
            console.error(e);
        }
    });
});
commander.program
    .command('build')
    .description('Build production bundle')
    .option('-e, --error', 'Show error details')
    .option('-n, --node', 'Build for node.js')
    .action(function (_a) {
    var error = _a.error, node = _a.node;
    innetJS.build({ node: node }).catch(function (e) {
        if (error) {
            console.error(e);
        }
    });
});
commander.program
    .parse(process.argv);
